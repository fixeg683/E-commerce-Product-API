{"ast":null,"code":"// Authentication service functions\nexport const login = async credentials => {\n  try {\n    // Simulate API call - replace with actual API endpoint\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Invalid credentials');\n    }\n    const data = await response.json();\n    localStorage.setItem('token', data.token);\n    localStorage.setItem('user', JSON.stringify(data.user));\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error);\n    // For development, simulate successful login\n    const mockUser = {\n      token: 'mock-jwt-token',\n      user: {\n        id: 1,\n        name: credentials.name || 'Test User',\n        email: credentials.email\n      }\n    };\n    localStorage.setItem('token', mockUser.token);\n    localStorage.setItem('user', JSON.stringify(mockUser.user));\n    return mockUser;\n  }\n};\nexport const signup = async userData => {\n  try {\n    // Simulate API call - replace with actual API endpoint\n    const response = await fetch('/api/auth/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error('Signup failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Signup failed:', error);\n    // For development, simulate successful signup\n    return {\n      success: true,\n      message: 'User created successfully'\n    };\n  }\n};\nexport const logout = () => {\n  // Clear all session data\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  localStorage.removeItem('cart');\n\n  // Clear any other stored data\n  Object.keys(localStorage).forEach(key => {\n    if (key.startsWith('app_')) {\n      localStorage.removeItem(key);\n    }\n  });\n};\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};","map":{"version":3,"names":["login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","user","error","console","mockUser","id","name","email","signup","userData","success","message","logout","removeItem","Object","keys","forEach","key","startsWith","isAuthenticated","getItem","getCurrentUser","parse"],"sources":["C:/Users/user/Desktop/E-commerce-Product-API/frontend/src/services/auth.js"],"sourcesContent":["// Authentication service functions\r\nexport const login = async (credentials) => {\r\n  try {\r\n    // Simulate API call - replace with actual API endpoint\r\n    const response = await fetch('/api/auth/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n\r\n    const data = await response.json();\r\n    localStorage.setItem('token', data.token);\r\n    localStorage.setItem('user', JSON.stringify(data.user));\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login failed:', error);\r\n    // For development, simulate successful login\r\n    const mockUser = {\r\n      token: 'mock-jwt-token',\r\n      user: {\r\n        id: 1,\r\n        name: credentials.name || 'Test User',\r\n        email: credentials.email\r\n      }\r\n    };\r\n    localStorage.setItem('token', mockUser.token);\r\n    localStorage.setItem('user', JSON.stringify(mockUser.user));\r\n    return mockUser;\r\n  }\r\n};\r\n\r\nexport const signup = async (userData) => {\r\n  try {\r\n    // Simulate API call - replace with actual API endpoint\r\n    const response = await fetch('/api/auth/signup', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Signup failed');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Signup failed:', error);\r\n    // For development, simulate successful signup\r\n    return { success: true, message: 'User created successfully' };\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  // Clear all session data\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n  localStorage.removeItem('cart');\r\n  \r\n  // Clear any other stored data\r\n  Object.keys(localStorage).forEach(key => {\r\n    if (key.startsWith('app_')) {\r\n      localStorage.removeItem(key);\r\n    }\r\n  });\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  return !!localStorage.getItem('token');\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  const user = localStorage.getItem('user');\r\n  return user ? JSON.parse(user) : null;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}