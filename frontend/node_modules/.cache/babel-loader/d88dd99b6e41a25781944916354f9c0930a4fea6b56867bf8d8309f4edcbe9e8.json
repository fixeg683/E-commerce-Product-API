{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Generic API request function for Django backend\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...options.headers\n    },\n    ...options\n  };\n  if (config.body && typeof config.body === 'object') {\n    config.body = JSON.stringify(config.body);\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n    return await response.text();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Product API functions for Django backend\nexport const getProducts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products/`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch products: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Handle different response formats\n    if (Array.isArray(data)) {\n      return data;\n    } else if (data.results) {\n      // Django REST framework pagination format\n      return data.results;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n    // Return empty array instead of mock data for production\n    return [];\n  }\n};\nexport const getProduct = id => apiRequest(`/products/${id}/`);\nexport const createProduct = product => apiRequest('/products/', {\n  method: 'POST',\n  body: product\n});\n\n// Order API functions\nexport const createOrder = async order => {\n  try {\n    return await apiRequest('/orders/', {\n      method: 'POST',\n      body: order\n    });\n  } catch (error) {\n    console.error('Failed to create order:', error);\n    return {\n      success: true,\n      orderId: Date.now(),\n      message: 'Order created successfully'\n    };\n  }\n};\nexport const getOrders = () => apiRequest('/orders/');\nexport const getOrder = id => apiRequest(`/orders/${id}/`);\n\n// Authentication API functions for Django\nexport const login = async credentials => {\n  return apiRequest('/auth/login/', {\n    method: 'POST',\n    body: credentials\n  });\n};\nexport const signup = async userData => {\n  return apiRequest('/auth/register/', {\n    method: 'POST',\n    body: userData\n  });\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","token","localStorage","getItem","config","headers","body","JSON","stringify","response","fetch","ok","Error","status","statusText","contentType","get","includes","json","text","error","console","getProducts","data","Array","isArray","results","getProduct","id","createProduct","product","method","createOrder","order","success","orderId","Date","now","message","getOrders","getOrder","login","credentials","signup","userData"],"sources":["C:/Users/user/Desktop/E-commerce-Product-API/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\n// Generic API request function for Django backend\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  if (config.body && typeof config.body === 'object') {\r\n    config.body = JSON.stringify(config.body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type');\r\n    if (contentType && contentType.includes('application/json')) {\r\n      return await response.json();\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Product API functions for Django backend\r\nexport const getProducts = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/products/`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch products: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Handle different response formats\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    } else if (data.results) {\r\n      // Django REST framework pagination format\r\n      return data.results;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch products:', error);\r\n    // Return empty array instead of mock data for production\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getProduct = (id) => apiRequest(`/products/${id}/`);\r\nexport const createProduct = (product) => apiRequest('/products/', { method: 'POST', body: product });\r\n\r\n// Order API functions\r\nexport const createOrder = async (order) => {\r\n  try {\r\n    return await apiRequest('/orders/', { method: 'POST', body: order });\r\n  } catch (error) {\r\n    console.error('Failed to create order:', error);\r\n    return { success: true, orderId: Date.now(), message: 'Order created successfully' };\r\n  }\r\n};\r\n\r\nexport const getOrders = () => apiRequest('/orders/');\r\nexport const getOrder = (id) => apiRequest(`/orders/${id}/`);\r\n\r\n// Authentication API functions for Django\r\nexport const login = async (credentials) => {\r\n  return apiRequest('/auth/login/', { method: 'POST', body: credentials });\r\n};\r\n\r\nexport const signup = async (userData) => {\r\n  return apiRequest('/auth/register/', { method: 'POST', body: userData });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}